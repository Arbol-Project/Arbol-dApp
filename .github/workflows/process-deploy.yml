on:
  push:
    branches:
      - feat/*

name: Deployment

jobs:
  deploy:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Get ECS Integration
      run: curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Get .env secrets
      uses: say8425/aws-secrets-manager-actions@v1
      env:
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      with:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
        SECRET_NAME: dapp
        OUTPUT_PATH: './chainlink_node/chainlink/.env'
    
    - name: Translate ENV variables
      run: |
        printenv

    - name: Set Environment
      id: set-env
      working-directory: chainlink_node
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "DOCKER_REGISTRY=${ECR_REGISTRY}" >> .env
        echo "IMAGE_TAG=${IMAGE_TAG}" >> .env

    - name: Get API secrets
      env:
        API_SECRETS: ${{ secrets.API }}
      run: printf "$API_SECRETS" base64 --decode > ./chainlink_node/chainlink/.api

    - name: Get Password secret
      env:
        PASSWORD_SECRET: ${{ secrets.PASSWORD }}
      run: printf "$PASSWORD_SECRET" base64 --decode > ./chainlink_node/chainlink/.password

    - name: Get TLS cert
      env:
        TLS_CERT_SECRET: ${{ secrets.TLS_CERT }}
      run: echo "$TLS_CERT_SECRET" base64 --decode > ./chainlink_node/chainlink/tls/server.crt

    - name: Get TLS key
      env:
        TLS_KEY_SECRET: ${{ secrets.TLS_KEY }}
      run: echo "$TLS_KEY_SECRET" base64 --decode > ./chainlink_node/chainlink/tls/server.key

    - name: Build
      working-directory: chainlink_node
      env: 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY_CHAINLINK: chainlink-node-1
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY_ADAPTER: external-adapter
        ECR_REPOSITORY_IPFS: ipfs-daemon
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_CHAINLINK:$IMAGE_TAG ./chainlink
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_ADAPTER:$IMAGE_TAG ./adapter
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_IPFS:$IMAGE_TAG ./ipfs

    - name: Build and Push to Amazon ECR
      working-directory: chainlink_node
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY_CHAINLINK: chainlink-node-1
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY_ADAPTER: external-adapter
        ECR_REPOSITORY_IPFS: ipfs-daemon
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_CHAINLINK:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_CHAINLINK:$IMAGE_TAG"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_ADAPTER:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_ADAPTER:$IMAGE_TAG"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_IPFS:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_IPFS:$IMAGE_TAG"
  
      - name: Download Task Definition
        run: aws ecs describe-task-definition --task-definition dapp-task --query taskDefinition > task-definition.json
      
      - name: Modify Amazon ECS task definition with Chainlink container
        id: render-chainlink-node
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: chainlink-node-1
          image: $ECR_REGISTRY/$ECR_REPOSITORY_CHAINLINK:latest

      - name: Modify Amazon ECS task definition with IPFS container
        id: render-ipfs-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-chainlink-container.outputs.task-definition }}
          container-name: ipfs-daemon
          image: $ECR_REGISTRY/$ECR_REPOSITORY_IPFS:latest
      
      - name: Modify Amazon ECS task definition with External Adapter container
        id: render-adapter-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.render-ipfs-container.outputs.task-definition }}
          container-name: external-adapter
          image: $ECR_REGISTRY/$ECR_REPOSITORY_ADAPTER:latest
      
      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-app-container.outputs.task-definition }}
          service: dapp-service
          cluster: dapp-cluster