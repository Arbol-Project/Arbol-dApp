on:
  push:
    branches:
    #   - feat/*
      - master

name: Deployment

jobs:
  deploy:
    name: Build
    runs-on: ubuntu-latest

    steps:
    - name: Check out Git repository
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Get ECS Integration
      run: curl -L https://raw.githubusercontent.com/docker/compose-cli/main/scripts/install/install_linux.sh | sh

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build
      working-directory: chainlink_node
      env: 
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY_ADAPTER: external-adapter
        # ECR_REPOSITORY_IPFS: ipfs-daemon
        # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_IPFS:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY_IPFS:latest ./ipfs
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_DEFAULT_REGION: us-east-1
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_ADAPTER:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY_ADAPTER:latest ./adapter

    - name: Push External Adapter to Amazon ECR
      id: push-adapter-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        ECR_REPOSITORY_ADAPTER: external-adapter
      run: |
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_ADAPTER:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_ADAPTER:$IMAGE_TAG"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_ADAPTER:latest
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_ADAPTER:latest"

    # - name: Push IPFS Daemon to Amazon ECR
    #   id: push-ipfs-image
    #   env:
    #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
    #     ECR_REPOSITORY_IPFS: ipfs-daemon
    #     IMAGE_TAG: ${{ github.sha }}
    #   run: |
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY_IPFS:$IMAGE_TAG
    #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_IPFS:$IMAGE_TAG"
    #     docker push $ECR_REGISTRY/$ECR_REPOSITORY_IPFS:latest
    #     echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY_IPFS:latest"
  
    - name: Download Task Definitions
      run: |
        aws ecs describe-task-definition --task-definition dapp-task-adapters --query taskDefinition > task-definition-adapters.json
      
    - name: Modify Amazon ECS task definition with External Adapter container
      id: render-adapter-container
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: task-definition-adapters.json
        container-name: external-adapter
        image: ${{ steps.push-adapter-image.outputs.image }}

    # - name: Modify Amazon ECS task definition with IPFS container
    #   id: render-ipfs-container
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: task-definition-adapters.json
    #     container-name: ipfs-daemon
    #     image: ${{ steps.push-ipfs-image.outputs.image }}
      
    - name: Deploy External Adapters to Amazon ECS service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.render-adapter-container.outputs.task-definition }}
        service: dapp-service-adapters
        cluster: dapp-cluster
        # wait-for-service-stability: true
