AWSTemplateFormatVersion: 2010-09-09
Parameters:
  VpcId:
    Type: "AWS::EC2::VPC::Id"
    Description: Select a VPC that allows instances to access the Internet.
  HostZoneID:
    Type: String
    Description: Select a Hosted Zone ID with the appropriate configuration.
  NodeSSLCert:
    Type: String
    Description: ARN of SSL certificate for Chainlink endpoint
  DashSSLCert:
    Type: String
    Description: ARN of SSL certificate for Dashboard endpoint
  SubnetId:
    Type: "List<AWS::EC2::Subnet::Id>"
    Description: Select at least two subnets in your selected VPC.
  DesiredCapacity:
    Type: Number
    Default: 1
    Description: Number of instances to launch in your ECS cluster.
  MaxSize:
    Type: Number
    Default: 2
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: c4.xlarge
    AllowedValues:
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
    ConstraintDescription: Please choose a valid instance type.
Mappings:
  AWSRegionToAMI:
    us-east-1:
      AMIID: ami-00bf0e20ed7ea8cdc
    us-east-2:
      AMIID: ami-0a9e12068cb98a01d
    us-west-1:
      AMIID: ami-0fa6c8d131a220017
    us-west-2:
      AMIID: ami-078c97cf1cefd1b38
    eu-west-1:
      AMIID: ami-0c9ef930279337028
    eu-central-1:
      AMIID: ami-065c1e34da68f2b02
    ap-northeast-1:
      AMIID: ami-02265963d1614d04d
    ap-southeast-1:
      AMIID: ami-0b68661b29b9e058c
    ap-southeast-2:
      AMIID: ami-00e4b147599c13588
Resources:
  ECSCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: dapp-cluster
  ECSSecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref VpcId
  ECSSecurityGroupHTTPinbound:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
  ECSSecurityGroupHTTPSinbound:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: 0.0.0.0/0
  ECSSecurityGroupSSHinbound:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      CidrIp: 0.0.0.0/0
  ECSSecurityGroupALBports:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref ECSSecurityGroup
      IpProtocol: tcp
      FromPort: 31000
      ToPort: 61000
      SourceSecurityGroupId: !Ref ECSSecurityGroup
  CloudwatchLogsGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Join
        - "-"
        - - ECSLogGroup
          - !Ref "AWS::StackName"
      RetentionInDays: 14
  # dependent container ordering: chainlink (ip=172.17.0.2), exporter (...3), prometheus (...4), grafana (...5), ipfs (...6), arbol-ea (...7), dclimate-ea (...8)
  taskdefinitionChainlink:
    Type: "AWS::ECS::TaskDefinition"
    Properties:
      Family: dapp-task-chainlink
      ExecutionRoleArn: !GetAtt
        - ECSTaskExecutionRole
        - Arn
      ContainerDefinitions:
        - Name: chainlink-node
          Cpu: 512
          Memory: 1024
          Essential: true
          Image: smartcontract/chainlink:1.2.1
          EntryPoint:
            [
              "chainlink",
              "local",
              "node",
              "-p",
              "/chainlink/password",
              "-a",
              "/chainlink/api",
            ]
          EnvironmentFiles:
            - Type: s3
              Value: "arn:aws:s3:::dapp-files/S3Links/chainlink/.env"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: dapp-chainlink
          MountPoints:
            - ContainerPath: /chainlink
              SourceVolume: Chainlink
          PortMappings:
            - ContainerPort: 6688
      Volumes:
        - Host:
            SourcePath: /home/ec2-user/S3Imports/chainlink
          Name: Chainlink
  taskdefinitionMonitor:
    Type: "AWS::ECS::TaskDefinition"
    DependsOn: serviceChainlink
    Properties:
      Family: dapp-task-monitor
      ContainerDefinitions:
        - Name: node-exporter
          Cpu: 512
          Memory: 1024
          User: 0
          Essential: true
          Image: prom/node-exporter:latest
          Command:
            [
              "--path.rootfs=/node-exporter",
              "--web.config=/node-exporter/exporterweb.yml",
            ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: dapp-node-exporter
          MountPoints:
            - ContainerPath: /node-exporter
              SourceVolume: NodeExporter
          PortMappings:
            - ContainerPort: 9100
        - Name: prometheus
          DependsOn:
            - Condition: START
              ContainerName: node-exporter
          Cpu: 512
          Memory: 1024
          User: 0
          Essential: true
          Image: prom/prometheus:latest
          Command:
            [
              "--config.file=/prometheus/prometheus.yml",
              "--web.config.file=/prometheus/prometheusweb.yml",
            ]
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: dapp-prometheus
          MountPoints:
            - ContainerPath: /prometheus
              SourceVolume: Prometheus
          PortMappings:
            - ContainerPort: 9090
        - Name: grafana
          DependsOn:
            - Condition: START
              ContainerName: prometheus
          Cpu: 512
          Memory: 1024
          User: 0
          Essential: true
          Image: grafana/grafana:latest
          Environment:
            - Name: GF_PATHS_CONFIG
              Value: /grafana/grafana.ini
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: dapp-grafana
          MountPoints:
            - ContainerPath: /grafana
              SourceVolume: Grafana
            - ContainerPath: /tls
              SourceVolume: GrafanaTLS
          PortMappings:
            - ContainerPort: 3000
      Volumes:
        - Host:
            SourcePath: /home/ec2-user/S3Imports/monitoring/node-exporter
          Name: NodeExporter
        - Host:
            SourcePath: /home/ec2-user/S3Imports/monitoring/prometheus
          Name: Prometheus
        - Host:
            SourcePath: /home/ec2-user/S3Imports/monitoring/grafana
          Name: Grafana
        - Host:
            SourcePath: /home/ec2-user/S3Imports/tls/grafana
          Name: GrafanaTLS
  taskdefinitionAdapters:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn: serviceMonitor
    Properties:
      Family: dapp-task-adapters
      ExecutionRoleArn: !GetAtt
        - ECSTaskExecutionRole
        - Arn
      ContainerDefinitions:
        - Name: ipfs-daemon
          Cpu: 512
          Memory: 1024
          User: 0
          Essential: true
          Image: 574269834288.dkr.ecr.us-east-1.amazonaws.com/ipfs-daemon
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: dapp-ipfs
          MountPoints:
            - ContainerPath: /export
              SourceVolume: IPFSExport
            - ContainerPath: /data/ipfs
              SourceVolume: IPFSData
          PortMappings:
            - ContainerPort: 5001
            - ContainerPort: 8080
            - ContainerPort: 4001
            - ContainerPort: 4001
              Protocol: udp
        - Name: external-adapter
          DependsOn: 
            - Condition: START
              ContainerName: ipfs-daemon
          Cpu: 512
          Memory: 1024
          User: 0
          Essential: true
          Image: 574269834288.dkr.ecr.us-east-1.amazonaws.com/external-adapter
          EnvironmentFiles:
            - Type: s3
              Value: "arn:aws:s3:::dapp-files/S3Links/mongo/.env"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: dapp-external-adapter
          PortMappings:
            - ContainerPort: 8000
        - Name: dclimate-adapter
          DependsOn: 
            - Condition: START
              ContainerName: external-adapter
          Cpu: 512
          Memory: 1024
          User: 0
          Essential: true
          Image: 574269834288.dkr.ecr.us-east-1.amazonaws.com/dclimate-adapter
          EnvironmentFiles:
            - Type: s3
              Value: "arn:aws:s3:::dapp-files/S3Links/dclimate/.env"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref CloudwatchLogsGroup
              awslogs-region: !Ref 'AWS::Region'
              awslogs-stream-prefix: dapp-dcliamte-adapter
          PortMappings:
            - ContainerPort: 8081
      Volumes:
      - Host:
          SourcePath: /home/ec2-user/S3Imports/ipfs/export
        Name: IPFSExport
      - Host:
          SourcePath: /home/ec2-user/S3Imports/ipfs/data
        Name: IPFSData
  NodeALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: NodeALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 30
      Subnets: !Ref SubnetId
      SecurityGroups:
        - !Ref ECSSecurityGroup
  NodeHTTPSListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref NodeTG
      LoadBalancerArn: !Ref NodeALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref NodeSSLCert
  NodeHTTPlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: "443"
            Host: "#{host}"
            Path: /#{path}
            Query: "#{query}"
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref NodeALB
      Port: 80
      Protocol: HTTP
  NodeListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    DependsOn: NodeHTTPSListener
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref NodeTG
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref NodeHTTPSListener
      Priority: 1
  NodeTG:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    DependsOn: NodeALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: NodeTG
      Port: 443
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
  NodeRecordSet:
    Type: "AWS::Route53::RecordSet"
    DependsOn: NodeALB
    Properties:
      AliasTarget:
        DNSName: !GetAtt NodeALB.DNSName
        EvaluateTargetHealth: true
        HostedZoneId: !GetAtt NodeALB.CanonicalHostedZoneID
      HostedZoneId: !Ref HostZoneID
      Name: chainlink.dapp.arbol.cloud
      Type: A
  DashALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: DashALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 30
      Subnets: !Ref SubnetId
      SecurityGroups:
        - !Ref ECSSecurityGroup
  DashHTTPSListener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref DashTG
      LoadBalancerArn: !Ref DashALB
      Port: 443
      Protocol: HTTPS
      Certificates:
        - CertificateArn: !Ref DashSSLCert
  DashHTTPlistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ECSServiceRole
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: HTTPS
            Port: "443"
            Host: "#{host}"
            Path: /#{path}
            Query: "#{query}"
            StatusCode: HTTP_301
      LoadBalancerArn: !Ref DashALB
      Port: 80
      Protocol: HTTP
  DashListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    DependsOn: DashHTTPSListener
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref DashTG
      Conditions:
        - Field: path-pattern
          Values:
            - /
      ListenerArn: !Ref DashHTTPSListener
      Priority: 1
  DashTG:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    DependsOn: NodeALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /api/health
      HealthCheckProtocol: HTTPS
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: DashTG
      Port: 443
      Protocol: HTTPS
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId
  DashRecordSet:
    Type: "AWS::Route53::RecordSet"
    DependsOn: DashALB
    Properties:
      AliasTarget:
        DNSName: !GetAtt DashALB.DNSName
        EvaluateTargetHealth: true
        HostedZoneId: !GetAtt DashALB.CanonicalHostedZoneID
      HostedZoneId: !Ref HostZoneID
      Name: dashboard.dapp.arbol.cloud
      Type: A
  ECSAutoScalingGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier: !Ref SubnetId
      LaunchConfigurationName: !Ref ContainerInstances
      MinSize: 1
      MaxSize: !Ref MaxSize
      DesiredCapacity: !Ref DesiredCapacity
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true
  ContainerInstances:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: !FindInMap
        - AWSRegionToAMI
        - !Ref "AWS::Region"
        - AMIID
      SecurityGroups:
        - !Ref ECSSecurityGroup
      InstanceType: !Ref InstanceType
      KeyName: ECS-access-key
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          yum install unzip -y
          unzip awscliv2.zip
          ./aws/install
          aws configure list
          mkdir /home/ec2-user/S3Imports
          chown ec2-user /home/ec2-user/S3Imports
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
          aws configure list
          aws s3 cp s3://dapp-files/S3Imports /home/ec2-user/S3Imports --recursive
          ls -R /home/ec2-user/S3Imports
  serviceChainlink:
    Type: "AWS::ECS::Service"
    DependsOn: NodeHTTPSListener
    Properties:
      ServiceName: dapp-service-chainlink
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: chainlink-node
          ContainerPort: 6688
          TargetGroupArn: !Ref NodeTG
      Role: !Ref ECSServiceRole
      TaskDefinition: !Ref taskdefinitionChainlink
  serviceMonitor:
    Type: "AWS::ECS::Service"
    DependsOn: DashHTTPSListener
    Properties:
      ServiceName: dapp-service-monitor
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      LoadBalancers:
        - ContainerName: grafana
          ContainerPort: 3000
          TargetGroupArn: !Ref DashTG
      Role: !Ref ECSServiceRole
      TaskDefinition: !Ref taskdefinitionMonitor
  serviceAdapters:
    Type: 'AWS::ECS::Service'
    Properties:
      ServiceName: dapp-service-adapters
      Cluster: !Ref ECSCluster
      DesiredCount: 1
      TaskDefinition: !Ref taskdefinitionAdapters
  ECSServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "elasticloadbalancing:DeregisterInstancesFromLoadBalancer"
                  - "elasticloadbalancing:DeregisterTargets"
                  - "elasticloadbalancing:Describe*"
                  - "elasticloadbalancing:RegisterInstancesWithLoadBalancer"
                  - "elasticloadbalancing:RegisterTargets"
                  - "ec2:Describe*"
                  - "ec2:AuthorizeSecurityGroupIngress"
                  - "ecr:*"
                Resource: "*"
  ServiceScalingTargetChainlink:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    DependsOn: serviceChainlink
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Join
        - ""
        - - service/
          - !Ref ECSCluster
          - /
          - !GetAtt
            - serviceChainlink
            - Name
      RoleARN: !GetAtt
        - AutoscalingRole
        - Arn
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: ecs
  ServiceScalingPolicyChainlink:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: AStepPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTargetChainlink
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 200
  ServiceScalingTargetMonitor:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    DependsOn: serviceMonitor
    Properties:
      MaxCapacity: 2
      MinCapacity: 1
      ResourceId: !Join
        - ""
        - - service/
          - !Ref ECSCluster
          - /
          - !GetAtt
            - serviceMonitor
            - Name
      RoleARN: !GetAtt
        - AutoscalingRole
        - Arn
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: ecs
  ServiceScalingPolicyMonitor:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: AStepPolicy
      PolicyType: StepScaling
      ScalingTargetId: !Ref ServiceScalingTargetMonitor
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 200
  # ServiceScalingTargetAdapters:
  #   Type: 'AWS::ApplicationAutoScaling::ScalableTarget'
  #   DependsOn: serviceAdapters
  #   Properties:
  #     MaxCapacity: 2
  #     MinCapacity: 1
  #     ResourceId: !Join
  #       - ''
  #       - - service/
  #         - !Ref ECSCluster
  #         - /
  #         - !GetAtt
  #           - serviceAdapter
  #           - Name
  #     RoleARN: !GetAtt
  #       - AutoscalingRole
  #       - Arn
  #     ScalableDimension: 'ecs:service:DesiredCount'
  #     ServiceNamespace: ecs
  # ServiceScalingPolicyAdapters:
  #   Type: 'AWS::ApplicationAutoScaling::ScalingPolicy'
  #   Properties:
  #     PolicyName: AStepPolicy
  #     PolicyType: StepScaling
  #     ScalingTargetId: !Ref ServiceScalingTargetAdapter
  #     StepScalingPolicyConfiguration:
  #       AdjustmentType: PercentChangeInCapacity
  #       Cooldown: 60
  #       MetricAggregationType: Average
  #       StepAdjustments:
  #         - MetricIntervalLowerBound: 0
  #           ScalingAdjustment: 200
  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
      Policies:
        - PolicyName: s3-filereader
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetBucketLocation"
                  - "s3:ListAllMyBuckets"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                Resource: "arn:aws:s3:::dapp-files"
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource: "arn:aws:s3:::dapp-files/*"
  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: ecs-service
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "ecs:CreateCluster"
                  - "ecs:DeregisterContainerInstance"
                  - "ecs:DiscoverPollEndpoint"
                  - "ecs:Poll"
                  - "ecs:RegisterContainerInstance"
                  - "ecs:StartTelemetrySession"
                  - "ecs:Submit*"
                  - "ecr:*"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
        - PolicyName: s3-filereader
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetBucketLocation"
                  - "s3:ListAllMyBuckets"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "s3:ListBucket"
                Resource: "arn:aws:s3:::dapp-files"
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                Resource: "arn:aws:s3:::dapp-files/*"
  AutoscalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - application-autoscaling.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: service-autoscaling
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "application-autoscaling:*"
                  - "cloudwatch:DescribeAlarms"
                  - "cloudwatch:PutMetricAlarm"
                  - "ecs:DescribeServices"
                  - "ecs:UpdateService"
                Resource: "*"
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
Outputs:
  ecscluster:
    Value: !Ref ECSCluster
  NodeALB:
    Description: Your ALB DNS URL
    Value: !Join
      - ""
      - - !GetAtt
          - NodeALB
          - DNSName
  DashALB:
    Description: Your ALB DNS URL
    Value: !Join
      - ""
      - - !GetAtt
          - DashALB
          - DNSName
  taskdefChainlink:
    Value: !Ref taskdefinitionChainlink
  taskdefMonitor:
    Value: !Ref taskdefinitionMonitor
  taskdefAdapters:
    Value: !Ref taskdefinitionAdapters
