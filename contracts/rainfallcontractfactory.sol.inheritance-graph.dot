digraph "" {
Chainlink[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>Chainlink</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    initialize(Chainlink.Request,bytes32,address,bytes4)</TD></TR><TR><TD align="left">    setBuffer(Chainlink.Request,bytes)</TD></TR><TR><TD align="left">    add(Chainlink.Request,string,string)</TD></TR><TR><TD align="left">    addBytes(Chainlink.Request,string,bytes)</TD></TR><TR><TD align="left">    addInt(Chainlink.Request,string,int256)</TD></TR><TR><TD align="left">    addUint(Chainlink.Request,string,uint256)</TD></TR><TR><TD align="left">    addStringArray(Chainlink.Request,string,string[])</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    defaultBufferSize</TD></TR></TABLE> >];

ChainlinkClient[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ChainlinkClient</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    buildChainlinkRequest(bytes32,address,bytes4)</TD></TR><TR><TD align="left">    sendChainlinkRequest(Chainlink.Request,uint256)</TD></TR><TR><TD align="left">    sendChainlinkRequestTo(address,Chainlink.Request,uint256)</TD></TR><TR><TD align="left">    requestOracleData(Chainlink.Request,uint256)</TD></TR><TR><TD align="left">    requestOracleDataFrom(address,Chainlink.Request,uint256)</TD></TR><TR><TD align="left">    rawRequest(address,Chainlink.Request,uint256,uint256,bytes4)</TD></TR><TR><TD align="left">    cancelChainlinkRequest(bytes32,uint256,bytes4,uint256)</TD></TR><TR><TD align="left">    setChainlinkOracle(address)</TD></TR><TR><TD align="left">    setChainlinkToken(address)</TD></TR><TR><TD align="left">    setPublicChainlinkToken()</TD></TR><TR><TD align="left">    chainlinkTokenAddress()</TD></TR><TR><TD align="left">    chainlinkOracleAddress()</TD></TR><TR><TD align="left">    addChainlinkExternalRequest(address,bytes32)</TD></TR><TR><TD align="left">    useChainlinkWithENS(address,bytes32)</TD></TR><TR><TD align="left">    updateChainlinkOracleWithENS()</TD></TR><TR><TD align="left">    validateChainlinkCallback(bytes32)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    recordChainlinkFulfillment(bytes32)</TD></TR><TR><TD align="left">    notPendingRequest(bytes32)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    LINK_DIVISIBILITY</TD></TR><TR><TD align="left">    AMOUNT_OVERRIDE</TD></TR><TR><TD align="left">    SENDER_OVERRIDE</TD></TR><TR><TD align="left">    ORACLE_ARGS_VERSION</TD></TR><TR><TD align="left">    OPERATOR_ARGS_VERSION</TD></TR><TR><TD align="left">    ENS_TOKEN_SUBNAME</TD></TR><TR><TD align="left">    ENS_ORACLE_SUBNAME</TD></TR><TR><TD align="left">    LINK_TOKEN_POINTER</TD></TR><TR><TD align="left">    ens<font color="blue" POINT-SIZE="10"> (ENSInterface)</font></TD></TR><TR><TD align="left">    ensNode</TD></TR><TR><TD align="left">    link<font color="blue" POINT-SIZE="10"> (LinkTokenInterface)</font></TD></TR><TR><TD align="left">    oracle<font color="blue" POINT-SIZE="10"> (OperatorInterface)</font></TD></TR><TR><TD align="left">    requestCount</TD></TR><TR><TD align="left">    pendingRequests</TD></TR></TABLE> >];

ConfirmedOwner -> ConfirmedOwnerWithProposal;
ConfirmedOwner[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ConfirmedOwner</B></TD></TR></TABLE> >];

ConfirmedOwnerWithProposal -> OwnableInterface;
ConfirmedOwnerWithProposal[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ConfirmedOwnerWithProposal</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left"><font color="#FFA500">    transferOwnership(address)</font></TD></TR><TR><TD align="left"><font color="#FFA500">    acceptOwnership()</font></TD></TR><TR><TD align="left"><font color="#FFA500">    owner()</font></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    _transferOwnership(address)</TD></TR><TR><TD align="left">    _validateOwnership()</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onlyOwner()</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    s_owner</TD></TR><TR><TD align="left">    s_pendingOwner</TD></TR></TABLE> >];

ChainlinkRequestInterface[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ChainlinkRequestInterface</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    oracleRequest(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)</TD></TR><TR><TD align="left">    cancelOracleRequest(bytes32,uint256,bytes4,uint256)</TD></TR></TABLE> >];

ENSInterface[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ENSInterface</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    setSubnodeOwner(bytes32,bytes32,address)</TD></TR><TR><TD align="left">    setResolver(bytes32,address)</TD></TR><TR><TD align="left">    setOwner(bytes32,address)</TD></TR><TR><TD align="left">    setTTL(bytes32,uint64)</TD></TR><TR><TD align="left">    owner(bytes32)</TD></TR><TR><TD align="left">    resolver(bytes32)</TD></TR><TR><TD align="left">    ttl(bytes32)</TD></TR></TABLE> >];

LinkTokenInterface[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>LinkTokenInterface</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    allowance(address,address)</TD></TR><TR><TD align="left">    approve(address,uint256)</TD></TR><TR><TD align="left">    balanceOf(address)</TD></TR><TR><TD align="left">    decimals()</TD></TR><TR><TD align="left">    decreaseApproval(address,uint256)</TD></TR><TR><TD align="left">    increaseApproval(address,uint256)</TD></TR><TR><TD align="left">    name()</TD></TR><TR><TD align="left">    symbol()</TD></TR><TR><TD align="left">    totalSupply()</TD></TR><TR><TD align="left">    transfer(address,uint256)</TD></TR><TR><TD align="left">    transferAndCall(address,uint256,bytes)</TD></TR><TR><TD align="left">    transferFrom(address,address,uint256)</TD></TR></TABLE> >];

OperatorInterface -> OracleInterface [ label="1" ];
OperatorInterface -> ChainlinkRequestInterface [ label="2" ];
OperatorInterface[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>OperatorInterface</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    requestOracleData(address,uint256,bytes32,address,bytes4,uint256,uint256,bytes)</TD></TR><TR><TD align="left">    fulfillOracleRequest2(bytes32,uint256,address,bytes4,uint256,bytes)</TD></TR><TR><TD align="left">    ownerTransferAndCall(address,uint256,bytes)</TD></TR><TR><TD align="left">    distributeFunds(address[],uint256[])</TD></TR><TR><TD align="left">    getAuthorizedSenders()</TD></TR><TR><TD align="left">    setAuthorizedSenders(address[])</TD></TR><TR><TD align="left">    getForwarder()</TD></TR></TABLE> >];

OracleInterface[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>OracleInterface</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    fulfillOracleRequest(bytes32,uint256,address,bytes4,uint256,bytes32)</TD></TR><TR><TD align="left">    isAuthorizedSender(address)</TD></TR><TR><TD align="left">    withdraw(address,uint256)</TD></TR><TR><TD align="left">    withdrawable()</TD></TR></TABLE> >];

OwnableInterface[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>OwnableInterface</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    owner()</TD></TR><TR><TD align="left">    transferOwnership(address)</TD></TR><TR><TD align="left">    acceptOwnership()</TD></TR></TABLE> >];

PointerInterface[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>PointerInterface</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    getAddress()</TD></TR></TABLE> >];

BufferChainlink[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>BufferChainlink</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    init(BufferChainlink.buffer,uint256)</TD></TR><TR><TD align="left">    fromBytes(bytes)</TD></TR><TR><TD align="left">    resize(BufferChainlink.buffer,uint256)</TD></TR><TR><TD align="left">    max(uint256,uint256)</TD></TR><TR><TD align="left">    truncate(BufferChainlink.buffer)</TD></TR><TR><TD align="left">    write(BufferChainlink.buffer,uint256,bytes,uint256)</TD></TR><TR><TD align="left">    append(BufferChainlink.buffer,bytes,uint256)</TD></TR><TR><TD align="left">    append(BufferChainlink.buffer,bytes)</TD></TR><TR><TD align="left">    writeUint8(BufferChainlink.buffer,uint256,uint8)</TD></TR><TR><TD align="left">    appendUint8(BufferChainlink.buffer,uint8)</TD></TR><TR><TD align="left">    write(BufferChainlink.buffer,uint256,bytes32,uint256)</TD></TR><TR><TD align="left">    writeBytes20(BufferChainlink.buffer,uint256,bytes20)</TD></TR><TR><TD align="left">    appendBytes20(BufferChainlink.buffer,bytes20)</TD></TR><TR><TD align="left">    appendBytes32(BufferChainlink.buffer,bytes32)</TD></TR><TR><TD align="left">    writeInt(BufferChainlink.buffer,uint256,uint256,uint256)</TD></TR><TR><TD align="left">    appendInt(BufferChainlink.buffer,uint256,uint256)</TD></TR></TABLE> >];

CBORChainlink[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>CBORChainlink</B></TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    encodeType(BufferChainlink.buffer,uint8,uint256)</TD></TR><TR><TD align="left">    encodeIndefiniteLengthType(BufferChainlink.buffer,uint8)</TD></TR><TR><TD align="left">    encodeUInt(BufferChainlink.buffer,uint256)</TD></TR><TR><TD align="left">    encodeInt(BufferChainlink.buffer,int256)</TD></TR><TR><TD align="left">    encodeBytes(BufferChainlink.buffer,bytes)</TD></TR><TR><TD align="left">    encodeBigNum(BufferChainlink.buffer,int256)</TD></TR><TR><TD align="left">    encodeSignedBigNum(BufferChainlink.buffer,int256)</TD></TR><TR><TD align="left">    encodeString(BufferChainlink.buffer,string)</TD></TR><TR><TD align="left">    startArray(BufferChainlink.buffer)</TD></TR><TR><TD align="left">    startMap(BufferChainlink.buffer)</TD></TR><TR><TD align="left">    endSequence(BufferChainlink.buffer)</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    MAJOR_TYPE_INT</TD></TR><TR><TD align="left">    MAJOR_TYPE_NEGATIVE_INT</TD></TR><TR><TD align="left">    MAJOR_TYPE_BYTES</TD></TR><TR><TD align="left">    MAJOR_TYPE_STRING</TD></TR><TR><TD align="left">    MAJOR_TYPE_ARRAY</TD></TR><TR><TD align="left">    MAJOR_TYPE_MAP</TD></TR><TR><TD align="left">    MAJOR_TYPE_TAG</TD></TR><TR><TD align="left">    MAJOR_TYPE_CONTENT_FREE</TD></TR><TR><TD align="left">    TAG_TYPE_BIGNUM</TD></TR><TR><TD align="left">    TAG_TYPE_NEGATIVE_BIGNUM</TD></TR></TABLE> >];

ENSResolver[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ENSResolver</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    addr(bytes32)</TD></TR></TABLE> >];

DerivativeProvider -> ChainlinkClient [ label="1" ];
DerivativeProvider -> ConfirmedOwner [ label="2" ];
DerivativeProvider[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>DerivativeProvider</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    newContract(string,string,string,string[],uint256,uint256,uint256,uint256,uint256)</TD></TR><TR><TD align="left">    getContract(address)</TD></TR><TR><TD align="left">    getContractPayout(address)</TD></TR><TR><TD align="left">    getETHBalance()</TD></TR><TR><TD align="left">    getLINKBalance()</TD></TR><TR><TD align="left">    getBlockTimeStamp()</TD></TR><TR><TD align="left">    getChainlinkToken()</TD></TR><TR><TD align="left">    endContractInstance()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    stringToBytes32(string)</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    provider</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    ORACLE_PAYMENT</TD></TR><TR><TD align="left">    contracts</TD></TR></TABLE> >];

ClimateOption -> ChainlinkClient [ label="1" ];
ClimateOption -> ConfirmedOwner [ label="2" ];
ClimateOption[shape="box"label=< <TABLE border="0"><TR><TD align="center"><B>ClimateOption</B></TD></TR><TR><TD align="left"><I>Public Functions:</I></TD></TR><TR><TD align="left">    requestPayoutEvaluation()</TD></TR><TR><TD align="left">    fulfillPayoutEvaluation(bytes32,uint256)</TD></TR><TR><TD align="left">    getPayout()</TD></TR><TR><TD align="left">    getETHBalance()</TD></TR><TR><TD align="left">    getLINKBalance()</TD></TR><TR><TD align="left">    addOracleJob(address,bytes32)</TD></TR><TR><TD align="left">    removeOracleJob(address)</TD></TR><TR><TD align="left">    getID()</TD></TR><TR><TD align="left">    getDataset()</TD></TR><TR><TD align="left">    getOptionType()</TD></TR><TR><TD align="left">    getLocations()</TD></TR><TR><TD align="left">    getStartDate()</TD></TR><TR><TD align="left">    getEndDate()</TD></TR><TR><TD align="left">    getStrike()</TD></TR><TR><TD align="left">    getLimit()</TD></TR><TR><TD align="left">    getExhaust()</TD></TR><TR><TD align="left">    getBlockTimeStamp()</TD></TR><TR><TD align="left">    getChainlinkToken()</TD></TR><TR><TD align="left">    endContractInstance()</TD></TR><TR><TD align="left"><I>Private Functions:</I></TD></TR><TR><TD align="left">    stringToBytes32(string)</TD></TR><TR><TD align="left"><I>Modifiers:</I></TD></TR><TR><TD align="left">    onContractEnded()</TD></TR><TR><TD align="left">    onContractEvaluated()</TD></TR><TR><TD align="left"><I>Public Variables:</I></TD></TR><TR><TD align="left">    oracleMap</TD></TR><TR><TD align="left">    oracles</TD></TR><TR><TD align="left">    jobIds</TD></TR><TR><TD align="left">    provider</TD></TR><TR><TD align="left">    contractActive</TD></TR><TR><TD align="left">    contractEvaluated</TD></TR><TR><TD align="left"><I>Private Variables:</I></TD></TR><TR><TD align="left">    oraclePaymentAmount</TD></TR><TR><TD align="left">    requestsPending</TD></TR><TR><TD align="left">    id</TD></TR><TR><TD align="left">    dataset</TD></TR><TR><TD align="left">    opt_type</TD></TR><TR><TD align="left">    locations</TD></TR><TR><TD align="left">    start</TD></TR><TR><TD align="left">    end</TD></TR><TR><TD align="left">    strike</TD></TR><TR><TD align="left">    limit</TD></TR><TR><TD align="left">    exhaust</TD></TR><TR><TD align="left">    payout</TD></TR><TR><TD align="left">    agg_result</TD></TR></TABLE> >];

}